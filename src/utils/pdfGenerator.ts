import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

// Extend the jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface PdfOptions {
  title?: string;
  filename?: string;
  author?: string;
  subject?: string;
  keywords?: string;
  creator?: string;
  orientation?: 'portrait' | 'landscape';
  unit?: 'pt' | 'mm' | 'cm' | 'in';
  format?: 'a4' | 'letter' | 'legal' | [number, number];
  compress?: boolean;
  footer?: {
    text: string;
    fontSize?: number;
    color?: string;
  };
}

export class PdfGenerator {
  private doc: jsPDF;
  private options: Required<PdfOptions>;
  private currentY: number = 20;
  private pageWidth: number;
  private pageHeight: number;
  private marginLeft: number = 20;
  private marginRight: number = 20;
  private lineHeight: number = 12;

  constructor(options: PdfOptions = {}) {
    const defaultOptions: Required<PdfOptions> = {
      title: 'Generated Document',
      filename: 'document.pdf',
      author: 'HOA Management System',
      subject: 'Document',
      keywords: 'pdf, document',
      creator: 'HOA Management System',
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true,
      footer: {
        text: 'Generated by HOA Management System',
        fontSize: 8,
        color: '#666666'
      }
    };

    this.options = { ...defaultOptions, ...options };
    this.doc = new jsPDF({
      orientation: this.options.orientation,
      unit: this.options.unit,
      format: this.options.format,
      compress: this.options.compress
    });
    
    // Set document metadata
    this.doc.setProperties({
      title: this.options.title,
      subject: this.options.subject,
      author: this.options.author,
      keywords: this.options.keywords,
      creator: this.options.creator
    });
    
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    
    // Add footer
    this.addFooter();
  }
  
  private addFooter() {
    const { text, fontSize = 8, color = '#666666' } = this.options.footer;
    
    const addFooterToPages = () => {
      const pageCount = this.doc.getNumberOfPages();
      
      for (let i = 1; i <= pageCount; i++) {
        this.doc.setPage(i);
        this.doc.setFontSize(fontSize);
        this.doc.setTextColor(color);
        this.doc.text(
          text,
          this.pageWidth / 2,
          this.pageHeight - 10,
          { align: 'center' }
        );
        this.doc.text(
          `Page ${i} of ${pageCount}`,
          this.pageWidth - this.marginRight,
          this.pageHeight - 10,
          { align: 'right' }
        );
      }
    };
    
    // Set up event handler for adding footer when document is complete
    this.doc.internal.events.subscribe('addPage', function() {
      addFooterToPages();
    });
    
    // Add footer to the first page
    addFooterToPages();
  }
  
  addTitle(text: string, fontSize: number = 18) {
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(text, this.pageWidth / 2, this.currentY, { align: 'center' });
    this.currentY += this.lineHeight;
    return this;
  }
  
  addSubtitle(text: string, fontSize: number = 14) {
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(text, this.marginLeft, this.currentY);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addText(text: string, fontSize: number = 10) {
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(text, this.marginLeft, this.currentY);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addLineBreak(count: number = 1) {
    this.currentY += this.lineHeight * count;
    return this;
  }
  
  addHorizontalLine() {
    this.doc.line(
      this.marginLeft,
      this.currentY,
      this.pageWidth - this.marginRight,
      this.currentY
    );
    this.currentY += this.lineHeight / 2;
    return this;
  }
  
  addTable(headers: string[], data: any[][]) {
    this.doc.autoTable({
      startY: this.currentY,
      head: [headers],
      body: data,
      margin: { left: this.marginLeft, right: this.marginRight },
      styles: { overflow: 'linebreak' },
      headStyles: { fillColor: [66, 66, 66] }
    });
    
    this.currentY = (this.doc as any).lastAutoTable.finalY + 10;
    return this;
  }
  
  addLogo(imgData: string, x?: number, y?: number, width?: number, height?: number) {
    const _x = x || this.marginLeft;
    const _y = y || this.currentY;
    const _width = width || 40;
    const _height = height || 20;
    
    this.doc.addImage(imgData, 'PNG', _x, _y, _width, _height);
    this.currentY += _height + this.lineHeight;
    return this;
  }
  
  addSignatureField(label: string, x?: number, y?: number) {
    const _x = x || this.marginLeft;
    const _y = y || this.currentY;
    
    this.doc.setFontSize(10);
    this.doc.text(label, _x, _y);
    this.doc.line(_x, _y + 5, _x + 60, _y + 5);
    this.doc.text('Date: _____________', _x + 80, _y);
    
    this.currentY = _y + this.lineHeight * 2;
    return this;
  }
  
  save() {
    this.doc.save(this.options.filename);
    return this;
  }
  
  getBlob(): Blob {
    return this.doc.output('blob');
  }
  
  getBase64(): string {
    return this.doc.output('datauristring');
  }
  
  getPdfUrl(): string {
    const blob = this.getBlob();
    return URL.createObjectURL(blob);
  }
  
  // Factory methods for specific document types
  static createResaleCertificate(data: any) {
    const pdf = new PdfGenerator({
      title: 'Texas Resale Certificate',
      filename: 'texas-resale-certificate.pdf',
      subject: 'HOA Resale Certificate',
      keywords: 'resale, certificate, texas, hoa'
    });
    
    pdf.addTitle('TEXAS RESALE CERTIFICATE')
      .addLineBreak()
      .addSubtitle('PROPERTY INFORMATION')
      .addText(`Address: ${data.propertyAddress || 'N/A'}`)
      .addText(`Owner: ${data.ownerName || 'N/A'}`)
      .addText(`Association: ${data.associationName || 'N/A'}`)
      .addText(`Closing Date: ${data.closingDate || 'N/A'}`)
      .addLineBreak()
      .addSubtitle('FINANCIAL INFORMATION')
      .addText(`Current Regular Assessment: $${data.regularAssessment || '0.00'} ${data.assessmentFrequency || 'monthly'}`)
      .addText(`Special Assessment: ${data.specialAssessment || 'None'}`)
      .addText(`Transfer Fee: $${data.transferFee || '0.00'}`)
      .addText(`Outstanding Balance: $${data.outstandingBalance || '0.00'}`)
      .addLineBreak()
      .addSubtitle('LEGAL MATTERS')
      .addText(`Violations: ${data.violations || 'None reported'}`)
      .addText(`Litigation: ${data.litigation || 'No pending litigation'}`)
      .addLineBreak()
      .addSubtitle('CERTIFICATION')
      .addText('This Resale Certificate is issued in compliance with Texas Property Code Chapter 207.')
      .addLineBreak()
      .addSignatureField('Authorized Signature');
    
    return pdf;
  }
  
  static createCondoQuestionnaire(data: any) {
    const pdf = new PdfGenerator({
      title: 'Condo Questionnaire',
      filename: 'condo-questionnaire.pdf',
      subject: 'Condominium Questionnaire for Lenders'
    });
    
    pdf.addTitle('CONDOMINIUM QUESTIONNAIRE')
      .addLineBreak()
      .addSubtitle('PROPERTY INFORMATION')
      .addText(`Condominium Name: ${data.condoName || 'N/A'}`)
      .addText(`Property Address: ${data.propertyAddress || 'N/A'}`)
      .addText(`Unit Number: ${data.unitNumber || 'N/A'}`)
      .addLineBreak()
      .addSubtitle('ASSOCIATION INFORMATION')
      .addText(`Association Name: ${data.associationName || 'N/A'}`)
      .addText(`Management Company: ${data.managementCompany || 'N/A'}`)
      .addText(`Total Units: ${data.totalUnits || 'N/A'}`)
      .addText(`Year Built: ${data.yearBuilt || 'N/A'}`)
      .addLineBreak()
      .addSubtitle('FINANCIAL INFORMATION')
      .addText(`Monthly HOA Fee: $${data.monthlyFee || '0.00'}`)
      .addText(`Reserve Fund Balance: $${data.reserveBalance || '0.00'}`)
      .addText(`Percentage of Owner-Occupied Units: ${data.ownerOccupiedPercentage || '0'}%`)
      .addText(`Percentage of Units in Arrears: ${data.arrearsPercentage || '0'}%`)
      .addLineBreak()
      .addSubtitle('INSURANCE INFORMATION')
      .addText(`Insurance Carrier: ${data.insuranceCarrier || 'N/A'}`)
      .addText(`Policy Number: ${data.policyNumber || 'N/A'}`)
      .addText(`Expiration Date: ${data.expirationDate || 'N/A'}`)
      .addLineBreak()
      .addSignatureField('Completed By');
    
    return pdf;
  }
  
  static createAccountStatement(data: any) {
    const pdf = new PdfGenerator({
      title: 'Account Statement',
      filename: 'account-statement.pdf',
      subject: 'HOA Account Statement'
    });
    
    pdf.addTitle('ACCOUNT STATEMENT')
      .addLineBreak()
      .addSubtitle('ACCOUNT INFORMATION')
      .addText(`Owner: ${data.ownerName || 'N/A'}`)
      .addText(`Property Address: ${data.propertyAddress || 'N/A'}`)
      .addText(`Account Number: ${data.accountNumber || 'N/A'}`)
      .addText(`Statement Date: ${data.statementDate || 'N/A'}`)
      .addLineBreak()
      .addSubtitle('ACCOUNT SUMMARY')
      .addText(`Previous Balance: $${data.previousBalance || '0.00'}`)
      .addText(`Payments: $${data.payments || '0.00'}`)
      .addText(`New Charges: $${data.newCharges || '0.00'}`)
      .addText(`Current Balance: $${data.currentBalance || '0.00'}`)
      .addLineBreak()
      .addSubtitle('TRANSACTION HISTORY')
      .addTable(
        ['Date', 'Description', 'Amount', 'Balance'],
        data.transactions || []
      );
    
    return pdf;
  }
}
