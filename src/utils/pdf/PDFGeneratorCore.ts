
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { PdfOptions } from './types/PdfTypes';
import { PdfFooterManager } from './utils/PdfFooterManager';
import { PdfTextManager } from './utils/PdfTextManager';
import { PdfElementManager } from './utils/PdfElementManager';

// Extend the jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export { PdfOptions };

export class PDFGeneratorCore {
  protected doc: jsPDF;
  protected options: Required<PdfOptions>;
  protected currentY: number = 20;
  protected pageWidth: number;
  protected pageHeight: number;
  protected marginLeft: number = 20;
  protected marginRight: number = 20;
  protected lineHeight: number = 12;

  constructor(options: PdfOptions = {}) {
    const defaultOptions: Required<PdfOptions> = {
      title: 'Generated Document',
      filename: 'document.pdf',
      author: 'HOA Management System',
      subject: 'Document',
      keywords: 'pdf, document',
      creator: 'HOA Management System',
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true,
      footer: {
        text: 'Generated by HOA Management System',
        fontSize: 8,
        color: '#666666'
      }
    };

    this.options = { ...defaultOptions, ...options };
    this.doc = new jsPDF({
      orientation: this.options.orientation,
      unit: this.options.unit,
      format: this.options.format,
      compress: this.options.compress
    });
    
    // Set document metadata
    this.doc.setProperties({
      title: this.options.title,
      subject: this.options.subject,
      author: this.options.author,
      keywords: this.options.keywords,
      creator: this.options.creator
    });
    
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    
    // Add footer
    this.addFooter();
  }
  
  private addFooter() {
    PdfFooterManager.addFooter(
      this.doc,
      this.options.footer,
      this.pageWidth,
      this.pageHeight,
      this.marginRight
    );
  }
  
  addTitle(text: string, fontSize: number = 18) {
    this.currentY = PdfTextManager.addTitle(this.doc, text, this.pageWidth, this.currentY, fontSize);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addSubtitle(text: string, fontSize: number = 14) {
    this.currentY = PdfTextManager.addSubtitle(this.doc, text, this.marginLeft, this.currentY, fontSize);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addText(text: string, fontSize: number = 10) {
    this.currentY = PdfTextManager.addText(this.doc, text, this.marginLeft, this.currentY, fontSize);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addLineBreak(count: number = 1) {
    this.currentY += this.lineHeight * count;
    return this;
  }
  
  addHorizontalLine() {
    this.currentY = PdfElementManager.addHorizontalLine(
      this.doc,
      this.marginLeft,
      this.marginRight,
      this.pageWidth,
      this.currentY
    );
    this.currentY += this.lineHeight / 2;
    return this;
  }
  
  addTable(headers: string[], data: any[][]) {
    this.currentY = PdfElementManager.addTable(
      this.doc,
      headers,
      data,
      this.marginLeft,
      this.marginRight,
      this.currentY
    );
    return this;
  }
  
  addLogo(imgData: string, x?: number, y?: number, width?: number, height?: number) {
    const _x = x || this.marginLeft;
    const _y = y || this.currentY;
    const _width = width || 40;
    const _height = height || 20;
    
    this.currentY = PdfElementManager.addLogo(this.doc, imgData, _x, _y, _width, _height);
    this.currentY += this.lineHeight;
    return this;
  }
  
  addSignatureField(label: string, x?: number, y?: number) {
    const _x = x || this.marginLeft;
    const _y = y || this.currentY;
    
    this.currentY = PdfElementManager.addSignatureField(this.doc, label, _x, _y);
    this.currentY += this.lineHeight * 2;
    return this;
  }
  
  save() {
    this.doc.save(this.options.filename);
    return this;
  }
  
  getBlob(): Blob {
    return this.doc.output('blob');
  }
  
  getBase64(): string {
    return this.doc.output('datauristring');
  }
  
  getPdfUrl(): string {
    const blob = this.getBlob();
    return URL.createObjectURL(blob);
  }
}
